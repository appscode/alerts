{{ $app := (include "singlestore-alerts.fullname" .) }}

{{ if (include "singlestore-alerts.alertsEnabled" .Values.form.alert.enabled) }}
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: {{ $app }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "singlestore-alerts.labels" . | nindent 4 }}
{{- if .Values.form.alert.labels }}
    {{- toYaml .Values.form.alert.labels | nindent 4 }}
{{- end }}
{{- if .Values.form.alert.annotations }}
  annotations:
    {{- toYaml .Values.form.alert.annotations | nindent 4 }}
{{- end }}
spec:
  groups:
  {{ with .Values.form.alert.groups.database -}}
  {{ if (include "singlestore-alerts.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: singlestore.database.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "singlestore-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.singlestoreInstanceDown.enabled .rules.singlestoreInstanceDown.severity)) -}}
    - alert: SinglestoreInstanceDown
      expr: memsql_up{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"} == 0
      for: {{ .rules.singlestoreInstanceDown.duration }}
      labels:
        severity: {{ .rules.singlestoreInstanceDown.severity }}
        {{- include "singlestore-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Singlestore instance down (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "Singlestore instance is down on {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
    {{ if (include "singlestore-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.singlestoreServiceDown.enabled .rules.singlestoreServiceDown.severity)) -}}
    - alert: SinglestoreServiceDown
      expr: sum by (service) (memsql_up{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}) == 0
      for: {{ .rules.singlestoreServiceDown.duration }}
      labels:
        severity: {{ .rules.singlestoreServiceDown.severity }}
        {{- include "singlestore-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Singlestore service down (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "Singlestore service is down on {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
    {{ if (include "singlestore-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.singlestoreTooManyConnections.enabled .rules.singlestoreTooManyConnections.severity)) -}}
    - alert: SinglestoreTooManyConnections
      expr: max_over_time(memsql_status_threads_connected{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[1m]) / memsql_variable_max_connections{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"} * 100 > {{.rules.singlestoreTooManyConnections.val}}
      for: {{ .rules.singlestoreTooManyConnections.duration }}
      labels:
        severity: {{ .rules.singlestoreTooManyConnections.severity }}
        {{- include "singlestore-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Singlestore too many connections (> {{.rules.singlestoreTooManyConnections.val}}%) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "More than {{.rules.singlestoreTooManyConnections.val}}% of Singlestore connections are in use on {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
    {{ if (include "singlestore-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.singlestoreHighThreadsRunning.enabled .rules.singlestoreHighThreadsRunning.severity)) -}}
    - alert: SinglestoreHighThreadsRunning
      expr: max_over_time(memsql_status_threads_running{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[1m]) / memsql_variable_max_connections{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"} * 100 > {{.rules.singlestoreHighThreadsRunning.val}}
      for: {{ .rules.singlestoreHighThreadsRunning.duration }}
      labels:
        severity: {{ .rules.singlestoreHighThreadsRunning.severity }}
        {{- include "singlestore-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Singlestore high threads running (> {{.rules.singlestoreHighThreadsRunning.val}}%) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "More than {{.rules.singlestoreHighThreadsRunning.val}}% of Singlestore threads are in use on {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
    {{ if (include "singlestore-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.singlestoreRestarted.enabled .rules.singlestoreRestarted.severity)) -}}
    - alert: SinglestoreRestarted
      expr: memsql_status_uptime{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"} < {{.rules.singlestoreRestarted.val}}
      for: {{ .rules.singlestoreRestarted.duration }}
      labels:
        severity: {{ .rules.singlestoreRestarted.severity }}
        {{- include "singlestore-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Singlestore restarted ({{.rules.singlestoreRestarted.val}} second ago) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "Singlestore restarted\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
    {{ if (include "singlestore-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.singlestoreHighQPS.enabled .rules.singlestoreHighQPS.severity)) -}}
    - alert: SinglestoreHighQPS
      expr: rate(memsql_status_queries{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[1m]) > {{.rules.singlestoreHighQPS.val}}
      for: {{ .rules.singlestoreHighQPS.duration }}
      labels:
        severity: {{ .rules.singlestoreHighQPS.severity }}
        {{- include "singlestore-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Singlestore has high queries per second (> {{.rules.singlestoreHighQPS.val}}) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "Singlestore has high QPS on (instance {{`{{`}} $labels.pod {{`}}`}})\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
    {{ if (include "singlestore-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.singlestoreHighIncomingBytes.enabled .rules.singlestoreHighIncomingBytes.severity)) -}}
    - alert: SinglestoreHighIncomingBytes
      expr: rate(memsql_status_bytes_received{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[1m]) > {{.rules.singlestoreHighIncomingBytes.val}}
      for: {{ .rules.singlestoreHighIncomingBytes.duration }}
      labels:
        severity: {{ .rules.singlestoreHighIncomingBytes.severity }}
        {{- include "singlestore-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Singlestore has high incoming bytes second (> {{.rules.singlestoreHighIncomingBytes.val}}) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "Singlestore has high incoming bytes per second on (instance {{`{{`}} $labels.pod {{`}}`}})\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
    {{ if (include "singlestore-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.singlestoreHighOutgoingBytes.enabled .rules.singlestoreHighOutgoingBytes.severity)) -}}
    - alert: SinglestoreHighOutgoingBytes
      expr: rate(memsql_status_bytes_sent{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[1m]) > {{.rules.singlestoreHighOutgoingBytes.val}}
      for: {{ .rules.singlestoreHighOutgoingBytes.duration }}
      labels:
        severity: {{ .rules.singlestoreHighOutgoingBytes.severity }}
        {{- include "singlestore-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: Singlestore has high outgoing bytes second (> {{.rules.singlestoreHighOutgoingBytes.val}}) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "Singlestore has high outgoing bytes per second on (instance {{`{{`}} $labels.pod {{`}}`}})\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ end -}}


  {{ with .Values.form.alert.groups.provisioner -}}
  {{ if (include "singlestore-alerts.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: singlestore.provisioner.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "singlestore-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.appPhaseNotReady.enabled .rules.appPhaseNotReady.severity)) -}}
    - alert: KubeDBSinglestorePhaseNotReady
      expr: kubedb_com_singlestore_status_phase{phase="NotReady",app="{{ $app }}",namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.appPhaseNotReady.duration }}
      labels:
        severity: {{ .rules.appPhaseNotReady.severity }}
        {{- include "singlestore-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: KubeDB Singlestore Phase NotReady (singlestore {{`{{`}} $labels.singlestore {{`}}`}})
        description: "KubeDB Singlestore Phase not ready on {{`{{`}} $labels.singlestore {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
    {{ if (include "singlestore-alerts.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.appPhaseCritical.enabled .rules.appPhaseCritical.severity)) -}}
    - alert: KubeDBSinglestorePhaseCritical
      expr: kubedb_com_singlestore_status_phase{phase="Critical",app="{{ $app }}",namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.appPhaseCritical.duration }}
      labels:
        severity: {{ .rules.appPhaseCritical.severity }}
        {{- include "singlestore-alerts.alertLabels" $ | nindent 8 }}
      annotations:
        summary: KubeDB Singlestore Phase Critical (singlestore {{`{{`}} $labels.singlestore {{`}}`}})
        description: "KubeDB Singlestore Phase Critical {{`{{`}} $labels.singlestore {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ end -}}

{{ end }}
