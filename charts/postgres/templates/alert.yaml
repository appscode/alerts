apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: kubedb-postgres-{{- .Values.namespace -}}-{{- .Values.dbName }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
    {{- range $key, $val := .Values.alert.ruleSelector }}
    {{ $key }}: {{ $val }}
    {{- end }}
spec:
  groups:
  {{ if .Values.alert.groups.database.enabled -}}
    - name: postgres-database-{{- .Values.namespace -}}-{{- .Values.dbName }}
      rules:
      {{ if .Values.alert.groups.database.rules.postgresInstanceDown -}}
        - alert: PostgresqlDown
          expr: pg_up{job="{{- .Values.dbName -}}-stats",namespace="{{- .Values.namespace -}}" == 0
          for: {{ .Values.alert.groups.database.rules.postgresInstanceDown.duration }}
          labels:
            severity: {{ .Values.alert.groups.database.rules.postgresInstanceDown.severity }}
            app: postgres
            alertname: postgres_instance_down
          annotations:
            summary: Postgres instance down (instance {{`{{`}} $labels.pod {{`}}`}})
            description: "MySQL instance is down on {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
      {{end -}}
      {{ if .Values.alert.groups.database.rules.postgresTooManyConnections.enabled -}}
      - alert: PostgresTooManyConnections
        expr: sum by (datname) (pg_stat_activity_count{job="{{- .Values.dbName -}}-stats",namespace="{{- .Values.namespace -}}"}) > (pg_settings_max_connections{job="{{- .Values.dbName -}}-stats",namespace="{{- .Values.namespace -}}"} * {{.Values.alert.groups.database.rules.postgresTooManyConnections.val}})
        for: {{ .Values.alert.groups.database.rules.postgresTooManyConnections.duration }}
        labels:
          severity: {{ .Values.alert.groups.database.rules.postgresTooManyConnections.severity }}
          app: postgres
          alertname: postgres_too_many_connections
        annotations:
          summary: Postgresql too many connections (instance {{`{{`}} $labels.pod {{`}}`}})
          description: "PostgreSQL instance has too many connections . {{.Values.alert.groups.database.rules.postgresTooManyConnections.val}}% of Postgres connections are in use on {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
      {{ end -}}
      {{ if .Values.alert.groups.database.rules.postgresSlowQueries.enabled -}}
      - alert: PostgresqlSlowQueries
        expr: pg_slow_queries{job="{{- .Values.dbName -}}-stats",namespace="{{- .Values.namespace -}}"} > 0
        for: {{ .Values.alert.groups.database.rules.postgresSlowQueries.duration }}
        labels:
          severity: {{ .Values.alert.groups.database.rules.postgresSlowQueries.severity }}
          app: postgres
          alertname: postgres_slow_queries
        annotations:
          summary: Postgres slow queries on (instance {{`{{`}} $labels.pod {{`}}`}})
          description: "PostgreSQL executes slow queries\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
      {{ end -}}
  {{end -}}
  {{ if .Values.alert.groups.kubedb.enabled -}}
    - name: postgres-kubedb-{{- .Values.namespace -}}-{{- .Values.dbName }}
      rules:
    {{ if .Values.alert.groups.kubedb.rules.kubeDBPostgresPhaseNotReady.enabled -}}
        - alert: KubeDBPostgresPhaseNotReady
          expr: kubedb_postgres_status_phase{phase="NotReady",postgres="{{- .Values.dbName -}}",namespace="{{- .Values.namespace -}}"} == 1
          for: {{ .Values.alert.groups.kubedb.rules.kubeDBPostgresPhaseNotReady.duration }}
          labels:
            severity: {{ .Values.alert.groups.kubedb.rules.kubeDBPostgresPhaseNotReady.severity }}
            app: postgres
            alertname: kubedb_postgres_phase_not_ready
          annotations:
            summary: KubeDB Postgres Phase NotReady (postgres {{`{{`}} $labels.postgres {{`}}`}})
            description: "KubeDB Postgres Phase not ready on {{`{{`}} $labels.postgres {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if .Values.alert.groups.kubedb.rules.kubeDBPostgresPhaseCritical.enabled -}}
        - alert: KubeDBPostgresPhaseCritical
          expr: kubedb_postgres_status_phase{phase="Critical",postgres="{{- .Values.dbName -}}",namespace="{{- .Values.namespace -}}"} == 1
          for: {{ .Values.alert.groups.kubedb.rules.kubeDBPostgresPhaseCritical.duration }}
          labels:
            severity: {{ .Values.alert.groups.kubedb.rules.kubeDBPostgresPhaseCritical.severity }}
            app: postgres
            alertname: kubedb_postgres_phase_critical
          annotations:
            summary: KubeDB Postgres Phase Critical (postgres {{`{{`}} $labels.postgres {{`}}`}})
            description: "KubeDB Postgres Phase Critical {{`{{`}} $labels.postgres {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ if .Values.alert.groups.opsrequest.enabled -}}
    - name: postgres-opsrequest-{{- .Values.namespace -}}-{{- .Values.dbName }}
      rules:
    {{ if .Values.alert.groups.opsrequest.rules.kubeDBPostgresOpsRequestOnProgress.enabled -}}
        - alert: KubeDBPostgresOpsRequestOnProgress
          expr: kubedb_postgres_opsrequest_status_phase{phase="Progressing",databaseRef="{{- .Values.dbName -}}",namespace="{{- .Values.namespace -}}"} == 1
          for: {{ .Values.alert.groups.opsrequest.rules.kubeDBPostgresOpsRequestOnProgress.duration }}
          labels:
            severity: {{ .Values.alert.groups.opsrequest.rules.kubeDBPostgresOpsRequestOnProgress.severity }}
            app: postgres
            alertname: kubedb_postgres_opsrequest_on_progress
          annotations:
            summary: PostgresOpsRequest on progress (postgresopsrequest {{`{{`}} $labels.postgresopsrequest {{`}}`}})
            description: "PostgresOpsRequest {{`{{`}} $labels.postgresopsrequest {{`}}`}} is in progressressing status\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if .Values.alert.groups.opsrequest.rules.kubeDBPostgresOpsRequestStatusProgressingToLong.enabled -}}
        - alert: KubeDBPostgresOpsRequestStatusProgressingToLong
          expr: kubedb_postgres_opsrequest_status_phase{phase="Progressing",databaseRef="{{- .Values.dbName -}}",namespace="{{- .Values.namespace -}}"} == 1
          for: {{ .Values.alert.groups.opsrequest.rules.kubeDBPostgresOpsRequestStatusProgressingToLong.duration }}
          labels:
            severity: {{ .Values.alert.groups.opsrequest.rules.kubeDBPostgresOpsRequestStatusProgressingToLong.severity }}
            app: postgres
            alertname: kubedb_postgres_opsrequest_status_progressing_too_long
          annotations:
            summary: PostgresOpsRequest is in progressing status for too long (postgresopsrequest {{`{{`}} $labels.postgresopsrequest {{`}}`}})
            description: "PostgresOpsRequest {{`{{`}} $labels.postgresopsrequest {{`}}`}} is in progressing status for too long\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if .Values.alert.groups.opsrequest.rules.kubeDBPostgresOpsRequestFailed.enabled -}}
        - alert: KubeDBPostgresOpsRequestFailed
          expr: kubedb_postgres_opsrequest_status_phase{phase="Failed",databaseRef="{{- .Values.dbName -}}",namespace="{{- .Values.namespace -}}"} == 1
          for: {{ .Values.alert.groups.opsrequest.rules.kubeDBPostgresOpsRequestFailed.duration }}
          labels:
            severity: {{ .Values.alert.groups.opsrequest.rules.kubeDBPostgresOpsRequestFailed.severity }}
            app: postgres
            alertname: kubedb_postgres_opsrequest_failed
          annotations:
            summary: PostgresOpsRequest failed (postgresopsrequest {{`{{`}} $labels.postgresopsrequest {{`}}`}})
            description: "PostgresOpsRequest {{`{{`}} $labels.postgresopsrequest {{`}}`}} failed \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ if .Values.alert.groups.stash.enabled -}}
    - name: postgres-stash-{{- .Values.namespace -}}-{{- .Values.dbName }}
      rules:
    {{ if .Values.alert.groups.stash.rules.postgresStashBackupSessionFailed.enabled -}}
        - alert: PostgresStashBackupSessionFailed
          expr: stash_backup_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_backupconfiguration_info{target_name="{{- .Values.dbName -}}", target_kind="AppBinding", namespace="{{- .Values.namespace -}}"} == 0
          for: {{ .Values.alert.groups.stash.rules.postgresStashBackupSessionFailed.duration }}
          labels:
            severity: {{ .Values.alert.groups.stash.rules.postgresStashBackupSessionFailed.severity }}
            app: postgres
            alertname: postgres_stash_backup_session_failed
          annotations:
            summary: Postgres Stash backup session failed (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
            description: "Postgres Stash backupsession failed {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if .Values.alert.groups.stash.rules.postgresStashRestoreSessionFailed.enabled -}}
        - alert: PostgresStashRestoreSessionFailed
          expr: stash_restore_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_restoresession_info{target_name="{{- .Values.dbName -}}", target_kind="AppBinding", namespace="{{- .Values.namespace -}}"} == 0
          for: {{ .Values.alert.groups.stash.rules.postgresStashRestoreSessionFailed.duration }}
          labels:
            severity: {{ .Values.alert.groups.stash.rules.postgresStashRestoreSessionFailed.severity }}
            app: postgres
            alertname: postgres_stash_restore_session_failed
          annotations:
            summary: Postgres Stash restore session failed (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
            description: "Postgres Stash restore session failed {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if .Values.alert.groups.stash.rules.postgresStashNoBackupSessionForTooLong.enabled -}}
        - alert: PostgresStashNoBackupSessionForTooLong
          expr: time() - stash_backup_last_success_time_seconds + on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_backupconfiguration_info{target_name="{{- .Values.dbName -}}", target_kind="AppBinding", namespace="{{- .Values.namespace -}}"} - 1 > {{ .Values.alert.groups.stash.rules.postgresStashNoBackupSessionForTooLong.val }}
          for: {{ .Values.alert.groups.stash.rules.postgresStashNoBackupSessionForTooLong.duration }}
          labels:
            severity: {{ .Values.alert.groups.stash.rules.postgresStashNoBackupSessionForTooLong.severity }}
            app: postgres
            alertname: postgres_stash_backup_session_failed
          annotations:
            summary: Postgres Stash no backup for last {{ .Values.alert.groups.stash.rules.postgresStashNoBackupSessionForTooLong.val }} second (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
            description: "Postgres Stash no backup for too long {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if .Values.alert.groups.stash.rules.postgresStashRepositoryCorrupted.enabled -}}
        - alert: PostgresStashRepositoryCorrupted
          expr: stash_repository_integrity * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_backupconfiguration_info{target_name="{{- .Values.dbName -}}", target_kind="AppBinding", namespace="{{- .Values.namespace -}}"}
          for: {{ .Values.alert.groups.stash.rules.postgresStashRepositoryCorrupted.duration }}
          labels:
            severity: {{ .Values.alert.groups.stash.rules.postgresStashRepositoryCorrupted.severity }}
            app: postgres
            alertname: postgres_stash_repository_corrupted
          annotations:
            summary: Postgres Stash repository corrupted (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
            description: "Postgres Stash repository corrupted {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if .Values.alert.groups.stash.rules.postgresStashRepositoryStorageRunningLow.enabled -}}
        - alert: PostgresStashRepositoryStorageRunningLow
          expr: stash_repository_size_bytes * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_backupconfiguration_info{target_name="{{- .Values.dbName -}}", target_kind="AppBinding", namespace="{{- .Values.namespace -}}"} > {{ .Values.alert.groups.stash.rules.postgresStashRepositoryStorageRunningLow.val }}
          for: {{ .Values.alert.groups.stash.rules.postgresStashRepositoryStorageRunningLow.duration }}
          labels:
            severity: {{ .Values.alert.groups.stash.rules.postgresStashRepositoryStorageRunningLow.severity }}
            app: postgres
            alertname: postgres_stash_repository_storage_running_low
          annotations:
            summary: Postgres Stash Repository storage more than {{ .Values.alert.groups.stash.rules.postgresStashRepositoryStorageRunningLow.val }} byte. (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
            description: "Postgres Stash Repository storage running low {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ if .Values.alert.groups.schema.enabled -}}
    - name: postgres-schema-{{- .Values.namespace -}}-{{- .Values.dbName }}
      rules:
    {{ if .Values.alert.groups.schema.rules.kubeDBPostgresSchemaPendingForTooLong.enabled -}}
        - alert: KubeDBPostgresSchemaPendingForTooLong
          expr: kubedb_postgres_schema_status_phase{phase="Pending",serverRefName="{{- .Values.dbName -}}",serverRefNamespace="{{- .Values.namespace -}}"} == 1
          for: {{ .Values.alert.groups.schema.rules.kubeDBPostgresSchemaPendingForTooLong.duration }}
          labels:
            severity: {{ .Values.alert.groups.schema.rules.kubeDBPostgresSchemaPendingForTooLong.severity }}
            app: postgres
            alertname: kubedb_postgres_schema_pending_for_too_long
          annotations:
            summary: KubeDB schema pending for too long for (postgresdatabase {{`{{`}} $labels.postgresdatabase {{`}}`}})
            description: "KubeDB schema pending for too long.\n {{`{{`}} $labels.postgresdatabase {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if .Values.alert.groups.schema.rules.kubeDBPostgresSchemaInProgressForTooLong.enabled -}}
        - alert: KubeDBPostgresSchemaInProgressForTooLong
          expr: kubedb_postgres_schema_status_phase{phase="InProgress",serverRefName="{{- .Values.dbName -}}",serverRefNamespace="{{- .Values.namespace -}}"} == 1
          for: {{ .Values.alert.groups.schema.rules.kubeDBPostgresSchemaInProgressForTooLong.duration }}
          labels:
            severity: {{ .Values.alert.groups.schema.rules.kubeDBPostgresSchemaInProgressForTooLong.severity }}
            app: postgres
            alertname: kubedb_postgres_schema_inprogress_for_too_long
          annotations:
            summary: KubeDB schema is in progress for too long for (postgresdatabase {{`{{`}} $labels.postgresdatabase {{`}}`}})
            description: "KubeDB schema is in progress for too long.\n {{`{{`}} $labels.postgresdatabase {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if .Values.alert.groups.schema.rules.kubeDBPostgresSchemaTerminatingForTooLong.enabled -}}
        - alert: KubeDBPostgresSchemaTerminatingForTooLong
          expr: kubedb_postgres_schema_status_phase{phase="Terminating",serverRefName="{{- .Values.dbName -}}",serverRefNamespace="{{- .Values.namespace -}}"} == 1
          for: {{ .Values.alert.groups.schema.rules.kubeDBPostgresSchemaTerminatingForTooLong.duration }}
          labels:
            severity: {{ .Values.alert.groups.schema.rules.kubeDBPostgresSchemaTerminatingForTooLong.severity }}
            app: postgres
            alertname: kubedb_postgres_schema_terminating_for_too_long
          annotations:
            summary: KubeDB schema terminating for too long for (postgresdatabase {{`{{`}} $labels.postgresdatabase {{`}}`}})
            description: "KubeDB schema terminating for too long.\n {{`{{`}} $labels.postgresdatabase {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if .Values.alert.groups.schema.rules.kubeDBPostgresSchemaFailed.enabled -}}
        - alert: KubeDBPostgresSchemaFailed
          expr: kubedb_postgres_schema_status_phase{phase="Failed",serverRefName="{{- .Values.dbName -}}",serverRefNamespace="{{- .Values.namespace -}}"} == 1
          for: {{ .Values.alert.groups.schema.rules.kubeDBPostgresSchemaFailed.duration }}
          labels:
            severity: {{ .Values.alert.groups.schema.rules.kubeDBPostgresSchemaFailed.severity }}
            app: postgres
            alertname: kubedb_postgres_schema_failed
          annotations:
            summary: KubeDB schema failed for (postgresdatabase {{`{{`}} $labels.postgresdatabase {{`}}`}})
            description: "KubeDB schema failed.\n {{`{{`}} $labels.postgresdatabase {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if .Values.alert.groups.schema.rules.kubeDBPostgresSchemaExpired.enabled -}}
        - alert: KubeDBPostgresSchemaExpired
          expr: kubedb_postgres_schema_status_phase{phase="Expired",serverRefName="{{- .Values.dbName -}}",serverRefNamespace="{{- .Values.namespace -}}"} == 1
          for: {{ .Values.alert.groups.schema.rules.kubeDBPostgresSchemaExpired.duration }}
          labels:
            severity: {{ .Values.alert.groups.schema.rules.kubeDBPostgresSchemaExpired.severity }}
            app: postgres
            alertname: kubedb_postgres_schema_expired
          annotations:
            summary: KubeDB schema expired for (postgresdatabase {{`{{`}} $labels.postgresdatabase {{`}}`}})
            description: "KubeDB schema expired.\n {{`{{`}} $labels.postgresdatabase {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
